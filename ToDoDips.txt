using System;
using System.Collections.Generic;
using System.IO;

/*
 * Created by Karen Maria Nyvoll on 17.10.18, in context of a home assignement for Dips Summer Internship 2019
 * 
 * This is a simple To-Do app, where items can be added with "Add [item]" and removed
 *  with "Do #[item number]", and all items can be shown with the command "Print".
 *  The app can remember its state between runs.
 * 
 * Please contact me on karenmny@stud.ntnu.no if you have any questions!
 */

namespace DipsApplication
{
    class ToDoNote
    {
        private static readonly String INSTRUCTIONS =   "\n1) To add an item, type 'Add [item]'" +
                                                        "\n2) To complete an item, type 'Do #[item number]'" +
                                                        "\n3) To see all items, type 'Print'";
        private static readonly String PATH = "todo-list.txt";

        public void Run()
        {
            while (true) {
                String feedback = Console.ReadLine();
                int inputType = VerifyInput(feedback);
                while (inputType == 0)
                {
                    Console.WriteLine(INSTRUCTIONS);
                    feedback = Console.ReadLine();
                    inputType = VerifyInput(feedback);
                }
                switch (inputType)
                {
                    case 1:
                        AddToList(feedback.Substring(4));
                        Console.WriteLine("Item added to list");
                        break;
                    case 2:
                        RemoveFromList(feedback.Substring(4));
                        break;
                    default:
                        //Console.WriteLine("This is the current list");
                        PrintList();
                        break;
                }
            }
        }

        private void AddToList(String item)
        {
            try
            {
                int counter = getItemNum();
                counter++;
                using (StreamWriter writeItem = new StreamWriter(PATH, true))
                {
                    writeItem.WriteLine("#" + counter.ToString() + " " + item);
                }
            }
            catch (IOException e)
            {
                Console.WriteLine("Unknown IOException " + e);
            }
        }

        private void RemoveFromList(String itemNum)
        {
            List<string> itemsToKeep = new List<string> { };
            try
            {
                if (File.Exists(PATH))
                {
                    string[] readItems = File.ReadAllLines(PATH);
                    foreach (string item in readItems)
                    {
                        if (!item.Substring(1,1).Equals(itemNum.ToString().Trim()))
                        {
                            itemsToKeep.Add(item);
                        }
                        else
                        {
                            Console.WriteLine("Completed " + item);
                        }
                    }
                    File.WriteAllLines(PATH, itemsToKeep.ToArray());
                }
                else
                {
                    //Console.WriteLine("The list has no items yet");
                }
            }
            catch (IOException e)
            {
                Console.WriteLine("Unknown IOException " + e);
            }
        }

        private void PrintList()
        {
            try
            {
                if (File.Exists(PATH))
                {
                    string[] readItems = File.ReadAllLines(PATH);
                    foreach (string item in readItems)
                    {
                        Console.WriteLine(item);
                    }
                }
                else
                {
                    //Console.WriteLine("The list has no items yet");
                }
            }
            catch(IOException e)
            {
                Console.WriteLine("Unknown IOException " + e);
            }
        }

        private int VerifyInput(string input)
        {
            // Returns a number between 1-3 corresponding with commands, or 0 if the input is no known command
            input = input.ToLower().Trim();
            if (input.StartsWith("add "))
            {
                return 1;
            }
            else if (input.StartsWith("do #"))
            {
                return 2;
            }
            else if (input.Equals("print"))
            {
                return 3;
            }
            return 0;
        }

        private int getItemNum()
        {
            // Returns 0 if there is no list, or the number of the last item if there is
            int itemNum = 0;
            try
            {
                if (File.Exists(PATH))
                {
                    string[] readItems = File.ReadAllLines(PATH);
                    string finalItem = readItems[readItems.Length - 1];
                    itemNum = Int32.Parse(finalItem.Substring(1, 2));
                }
            }
            catch (IndexOutOfRangeException)
            {
                return itemNum;
            }
            return itemNum;
        }

        static void Main()
        {
            Console.WriteLine("Welcome to the To-Do app!" + INSTRUCTIONS);
            ToDoNote noteApp = new ToDoNote();
            noteApp.Run();
        }
    }
}